#!/bin/bash
# vim: set ft=sh sw=2:

_ROOT="$(dirname "${BASH_SOURCE}")/.."

# . "${_ROOT}/hooks/os"

log::f () {
 printf "INFO: %s $*\n" "$(date)"
}

log::e () {
  printf "ERROR: %s  $*\n" "$(date)"
}

os::install_pip() {
  log::f "Installing pip"

  local _path
  _path=$1

  local out
  out="$(mktemp)"

  log::f "Installing Pip"

  curl -LO "$out" https://bootstrap.pypa.io/get-pip.py
  python "$out"
}

os::install_pip() {
 log::f "Installing Pip"
 curl -L https://bootstrap.pypa.io/get-pip.py && yes | bash
}

os::get_distro() {
  # Determine OS platform
  UNAME=$(uname | tr "[:upper:]" "[:lower:]")

  # If Linux, try to determine specific distribution
  if [ "$UNAME" == "linux" ]; then
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
      export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
    # Otherwise, use release info file
    else
      export DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
    fi
  fi

  # For everything else (or if above failed), just use generic identifier
  [ "$DISTRO" == "" ] && export DISTRO=$UNAME
  unset UNAME
}

shell::theme() {
  git clone https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
}

os::ubuntu::ppas() {
  echo "Not for now"
  # sudo add-apt-repository -y ppa:neovim-ppa/stable
}

kube::binaries() {
  curl -L -o "$HOME/bin/kubectl" "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  ## TODO: Secure me
  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
}

os::ubuntu::install_packages() {
  log::f "Installing packages"

  sudo apt install -y \
    curl              \
    tmux              \
    gawk              \
    git               \
    neovim            \
    python3-neovim    \
    nodejs            \
    npm               \
    python-pip        \
    python3-pip       \
    ppa-purge         \
    ruby              \
    silversearcher-ag \
    tmux              \
    virtualenv        \
    xclip             \
    zsh
}

os::set_zoom_scaling_factor () {
  perl -i -pe 's/scaleFactor=2/scaleFactor=1/' ~/.config/zoomus.conf
}

# TOOLS TODO:
# - Wireshark
# - SSLScan (https://github.com/ioerror/sslscan)
