#!/bin/bash

# vim: set ft=sh sw=2:

export GOARCH=$(go env GOARCH 2>/dev/null || echo "amd64")

_ROOT="$(dirname "${BASH_SOURCE}")/.."

log::f () {
 printf "INFO: %s $*\n" "$(date)"
}

log::e () {
  printf "ERROR: %s  $*\n" "$(date)"
}

gh::download() {
  local repo version artifact output
  repo=$1
  version=$2
  artifact=$3
  output=$4

  echo "Downloading release ${version} of ${artifact} from ${repo}"

  curl -sfLo "${output}" "https://github.com/${repo}/releases/download/${version}/${artifact}"
}

os::get_distro() {
  # Determine OS platform
  UNAME=$(uname | tr "[:upper:]" "[:lower:]")

  # If Linux, try to determine specific distribution
  if [ "$UNAME" == "linux" ]; then
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
      export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
    # Otherwise, use release info file
    else
      export DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
    fi
  fi

  # For everything else (or if above failed), just use generic identifier
  [ "$DISTRO" == "" ] && export DISTRO=$UNAME
  unset UNAME
}

kube::binaries() {
  curl -L -o "$HOME/bin/kubectl" "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  ## TODO: Secure me
  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
}

os::ubuntu::install_packages() {
  log::f "Installing apt packages"

  sudo apt update

  sudo apt install -y --no-install-recommends \
    binutils                   \
    containerd                 \
    cpu-checker                \
    curl                       \
    dmsetup                    \
    fonts-firacode             \
    fzf                        \
    gawk                       \
    git                        \
    gnupg                      \
    neovim                     \
    nodejs                     \
    npm                        \
    openssh-client             \
    pipx                       \
    ppa-purge                  \
    python2                    \
    python2-setuptools-whl     \
    python3-full               \
    python3-neovim             \
    python3-venv               \
    ruby                       \
    silversearcher-ag          \
    software-properties-common \
    tmux                       \
    virtualenv                 \
    xclip                      \
    zsh

  log::f "Installing snap packages"
  sudo snap install --edge starship
}

os::set_zoom_scaling_factor () {
  perl -i -pe 's/scaleFactor=2/scaleFactor=1/' ~/.config/zoomus.conf
}

go::install_developer_tools() {
  sudo snap install go --classic
  go get -u github.com/goware/modvendor
  go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.52.2
}



# Tools
#######

go::install_developer_tools

tools::install_terraform() {
  wget -O- https://apt.releases.hashicorp.com/gpg | \
  gpg --dearmor | \
  sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg

  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
  sudo tee /etc/apt/sources.list.d/hashicorp.list
  sudo apt update
  sudo apt install -y terraform
}

tools::install_ansible() {
  # sudo apt-add-repository -y ppa:ansible/ansible
  sudo apt update
  sudo apt install -y ansible
}

tools::install_vegeta() {
  go install github.com/tsenart/vegeta@latest
}

tools::wireshark() {
  # sudo add-apt-repository ppa:wireshark-dev/stable -y
  sudo apt update
  sudo apt install -y wireshark
}

tools::nerdctl() {
  local VERSION=v1.3.1
  local ARCH
  ARCH=$([ "$(uname -m)" = "x86_64" ] && echo amd64 || echo arm64)

  local out
  out="$(mktemp)"

  gh::download "containerd/nerdctl" "${VERSION}" "nerdctl-${VERSION:1}-linux-${ARCH}.tar.gz" "${out}"

  sudo tar Cxzvvf /usr/local/bin "${out}"
}

tools::dive() {
  local VERSION=v0.10.0
  local ARCH
  ARCH=$([ "$(uname -m)" = "x86_64" ] && echo amd64 || echo arm64)

  local out
  out="$(mktemp)"

  gh::download "wagoodman/dive" "${VERSION}" "dive_${VERSION:1}_linux_${ARCH}.deb" "${out}"

  sudo dpkg -i "${out}"
}

tools::buildkit() {
  local VERSION=v0.11.6
  local ARCH
  ARCH=$([ "$(uname -m)" = "x86_64" ] && echo amd64 || echo arm64)

  local out
  out="$(mktemp)"

  gh::download "moby/buildkit" "${VERSION}" "buildkit-${VERSION}.linux-${ARCH}.tar.gz" "${out}"

  sudo tar -C /usr/local/bin -xzvv --strip-components 1 -f "${out}"
}

tools::regctl() {
  local VERSION=v0.4.8
  local ARCH
  ARCH=$([ "$(uname -m)" = "x86_64" ] && echo amd64 || echo arm64)

  local out
  out="$(mktemp)"

  gh::download "regclient/regclient" "${VERSION}" "regctl-linux-${ARCH}" "${out}"

  chmod +x "${out}"
  sudo mv "${out}" /usr/local/bin/regctl
}

# tools::install_terraform # TODO(apryde): No PPA for lunar
tools::install_ansible
tools::install_vegeta
tools::wireshark
tools::nerdctl
tools::dive
tools::buildkit
tools::regctl

pipx install oci-cli
pipx install isort
pipx install autopep8

# TODO:
# - SSLScan (https://github.com/ioerror/sslscan)
